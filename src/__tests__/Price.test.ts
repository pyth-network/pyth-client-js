import { clusterApiUrl, Connection, PublicKey } from '@solana/web3.js'
import {
  Magic,
  MAX_SLOT_DIFFERENCE,
  parseMappingData,
  parsePriceData,
  parseProductData,
  PriceStatus,
  Version,
} from '../index'

test('Price', (done) => {
  jest.setTimeout(60000)
  const url = clusterApiUrl('devnet')
  const oraclePublicKey = 'BmA9Z6FjioHJPpjT39QazZyhDRUdZy2ezwx4GiDdE2u2'
  const connection = new Connection(url)
  const publicKey = new PublicKey(oraclePublicKey)
  connection
    .getAccountInfo(publicKey)
    .then((accountInfo) => {
      if (accountInfo && accountInfo.data) {
        const mapping = parseMappingData(accountInfo.data)
        connection.getAccountInfo(mapping.productAccountKeys[0]).then((accountInfo) => {
          if (accountInfo && accountInfo.data) {
            const product = parseProductData(accountInfo.data)
            connection.getAccountInfo(product.priceAccountKey).then((accountInfo) => {
              if (accountInfo && accountInfo.data) {
                const price = parsePriceData(accountInfo.data)
                console.log(product.product.symbol)
                console.log(price)
                expect(price.magic).toBe(Magic)
                expect(price.version).toBe(Version)
                done()
              } else {
                done('No price accountInfo')
              }
            })
          } else {
            done('No product accountInfo')
          }
        })
      } else {
        done('No mapping accountInfo')
      }
    })
    .catch((error) => {
      done(error)
    })
})

test('Handle price getting stale', (done) => {
  jest.setTimeout(60000)

  const b64_data =
    '1MOyoQIAAAADAAAAEAsAAAEAAAD4////GwAAABUAAAC6yDcHAAAAALnINwcAAAAA4Gbo+kgAAAB/BW14AQAAAHyfF3gAAAAAEF8QBg' +
    'AAAAB8ZS16AAAAAHyfF3gAAAAAAQAAAAAAAAADAAAAAAAAAMZ5QL5A4Mx/+qGssI7j+rMJVaGX2h7Cl6sTPU1D2G7mAAAAAAAAAAAA' +
    'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC4yDcHAAAAAKASKJtIAAAAWKPpBgAAAAAAAAAAAAAAAFADCptIAAAAYJmfBwAAAAABAAAAAA' +
    'AAALrINwcAAAAA45Qx5CsqvbDhOJtnIpvcng1PorJw47e2KQXX0YVPmjUAzIpLSQAAAID7mioAAAAAAQAAAAAAAAAftTYHAAAAAADM' +
    'iktJAAAAgPuaKgAAAAABAAAAAAAAAB+1NgcAAAAAFg+6wTr33dgF0xcKPeDGvZcSah4CwNJZ0Khu+CHW5cdABUKUSAAAAO7GFQMAAA' +
    'AAAQAAAAAAAAC1yDcHAAAAAEAFQpRIAAAA7sYVAwAAAAABAAAAAAAAALfINwcAAAAAefrfLNzEqEaqlX3ag5+StobUMoSgAaOeei6y' +
    '+250Ge1YoKVkWQAAAFjkyAgAAAAAAQAAAAAAAABAmaMGAAAAAFigpWRZAAAAWOTICAAAAAABAAAAAAAAAECZowYAAAAAibazYiCMIT' +
    'lc2drXqvTlt3fSCnk7W1heG3EouJogjZfz93OeSAAAAPaTSwkAAAAAAQAAAAAAAAC0yDcHAAAAAM9xPZ5IAAAA/IxLCQAAAAABAAAA' +
    'AAAAALfINwcAAAAAGuUCo+lCuLEcw3RJa02cXDn4DF2sH0WfNaIOwbhzCJ1AE2mbSAAAAACZDQQAAAAAAQAAAAAAAACPyDcHAAAAAC' +
    'BXqppIAAAAYIVhBAAAAAABAAAAAAAAAJHINwcAAAAABdIGTzMc/93Kvpb6NlUk3WT0s4bohaNNFSy+rgQs6vWuk/6fSAAAACOqFQcA' +
    'AAAAAQAAAAAAAAC1yDcHAAAAAK6T/p9IAAAA3dsNBgAAAAABAAAAAAAAALfINwcAAAAACdnkh8pVcvbU1GrqbrtPcukAy9tzmqwQXg' +
    'CzlnP/Vh4GUx+WSAAAAD2NsRYAAAAAAQAAAAAAAAC0yDcHAAAAAJ82B5NIAAAAgD0pGQAAAAABAAAAAAAAALbINwcAAAAAqerT49NL' +
    'zIU0uyxlDrJ6jIw/GiLWiChDKFOMQqjoI0NAm9HAPAAAAH+7Iw8AAAAAAQAAAAAAAABgMhoHAAAAAECb0cA8AAAAf7sjDwAAAAABAA' +
    'AAAAAAAGAyGgcAAAAA4rmPJpCE1IgFEcgRXc7wT1PH4geZLgP/0SbflE3k2wRACZWNSAAAAEBCDwAAAAAAAQAAAAAAAAC1yDcHAAAA' +
    'AEAJlY1IAAAAQEIPAAAAAAABAAAAAAAAALXINwcAAAAAB/LLOf2wKdxReE0o7xeRHZfBppyFcjobYlWzQlNDrXWAXrWbSAAAAAAtMQ' +
    'EAAAAAAQAAAAAAAACzyDcHAAAAAIBetZtIAAAAAC0xAQAAAAABAAAAAAAAALPINwcAAAAAJP62d6a8xTc1CmcY+0DmTwuAo2S1z/fu' +
    'ZczNVzwgzQ9jMkmaSAAAAMCuOygAAAAAAQAAAAAAAAC1yDcHAAAAAEuP0plIAAAAwK47KAAAAAABAAAAAAAAALfINwcAAAAADcO86p' +
    'FVaXYIsF8EpwrQmkFRcqqbtfdAhzrAeCsrGkVAZ0qJSAAAAATCjLsAAAAAAQAAAAAAAADDZzYHAAAAAEBnSolIAAAABMKMuwAAAAAB' +
    'AAAAAAAAAMNnNgcAAAAAnz6le9QJugDEDZKuVxNBwn48L37frOHCSlGxoVwxsrfgISuUSAAAAMB68gQAAAAAAQAAAAAAAACzyDcHAA' +
    'AAAOAhK5RIAAAAwHryBAAAAAABAAAAAAAAALbINwcAAAAAQ4KPo2Gdpryu1okX3h18zpIX3scrrhIwY/97590vlj4g2VOXSAAAAC9z' +
    'zQIAAAAAAQAAAAAAAAC1yDcHAAAAAEBxHpdIAAAASNHFAgAAAAABAAAAAAAAALfINwcAAAAAGIOxJG3aXQcXPb041WcABxWELB/Q6J' +
    'bnCwpt0uUaT5cgYOeaSAAAAGCOngQAAAAAAQAAAAAAAACxyDcHAAAAAMBY3JlIAAAAgC+mBAAAAAABAAAAAAAAALbINwcAAAAAn2pD' +
    'Hx87OIRmUmOPitxO8uWtC/ysp/PHeaLfwhx8dSf/ytiGSAAAAP/g9QUAAAAAAQAAAAAAAAB3yDcHAAAAAP/K2IZIAAAA/+D1BQAAAA' +
    'ABAAAAAAAAAHfINwcAAAAAQ7d4S2+FZssyg2X7zgtARhUjuuznhRezFVwx2qM4KY/AfNCaSAAAAP8foQcAAAAAAQAAAAAAAAC0yDcH' +
    'AAAAAKClWplIAAAAH8GoBwAAAAABAAAAAAAAALfINwcAAAAA9Z3d78wWay2JpKPM8/7Eu0uYoVG0wDf/YV67eELjPXWgGnScSAAAAO' +
    'BRaAYAAAAAAQAAAAAAAACwyDcHAAAAAKAadJxIAAAA4FFoBgAAAAABAAAAAAAAALDINwcAAAAA0MozHPXZ7nFryMaQowCrqEA7NxQc' +
    'tjsCZcCYwMWOY6zAhQ2bSAAAAAYqPgUAAAAAAQAAAAAAAAC1yDcHAAAAACBXqppIAAAATTbqBAAAAAABAAAAAAAAALfINwcAAAAAvF' +
    'RslRVZlbwHP1fHn9TC4H0gHT4cvadEJLsMYazqQb7g9PmSSAAAACA//woAAAAAAQAAAAAAAAC0yDcHAAAAAOD0+ZJIAAAAID//CgAA' +
    'AAABAAAAAAAAALfINwcAAAAAMRuB0W8DQxLQhWNGn9A26Vs6Zd9SkHugsRL/ifhdwmamhD2jSAAAAKthmBIAAAAAAQAAAAAAAAC1yD' +
    'cHAAAAAKaEPaNIAAAAq2GYEgAAAAABAAAAAAAAALXINwcAAAAAf4BTJ2kp9OgaB+ZMWleZBpkj76iE3CdHHzO3YVCMTh/gL1KbSAAA' +
    'AOBwcgAAAAAAAQAAAAAAAAC0yDcHAAAAAGBaDplIAAAAIMX7AAAAAAABAAAAAAAAALfINwcAAAAABHkihWa8qHaHujLYgFXDIwjMb1' +
    'piz6Z/GIGZQeOFsrLAalaaSAAAAAB6AwoAAAAAAQAAAAAAAACxyDcHAAAAAIAoR5pIAAAAgEpdBQAAAAABAAAAAAAAALfINwcAAAAA' +
    'fcK1rXWbYoQKtCq2nzJiCmvpYCTjfvXYuWgji0GQsGpqxReTSAAAAGQrxgkAAAAAAQAAAAAAAAC1yDcHAAAAALKht5JIAAAADJRqCQ' +
    'AAAAABAAAAAAAAALfINwcAAAAAQzSbO2mHWTxl9wARIruF2PbxX/03UasIR4i2h2B6He3A+iaeSAAAAACVugoAAAAAAQAAAAAAAAC0' +
    'yDcHAAAAAICdYJ1IAAAAAJW6CgAAAAABAAAAAAAAALfINwcAAAAAE3OB0D0ZD0KqsBVhd9DT6HJgQCrpXa9YKWoFPY/jselAjNWXSA' +
    'AAAD8jBQYAAAAAAQAAAAAAAAC0yDcHAAAAAECM1ZdIAAAAPyMFBgAAAAABAAAAAAAAALfINwcAAAAAsdAzM1QQJ5F9okFqcfs4Y6PP' +
    'cqPB7MdqSFXQjYAY9UEgV6qaSAAAAEDgBgsAAAAAAQAAAAAAAAC1yDcHAAAAAGBaDplIAAAAwObOBwAAAAABAAAAAAAAALfINwcAAA' +
    'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
    'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
    'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
    'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
    'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
    'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
    'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'

  const data = Buffer.from(b64_data, 'base64')
  const price = parsePriceData(data)
  console.log(price)
  expect(price.magic).toBe(Magic)
  expect(price.version).toBe(Version)
  expect(price.status).toBe(PriceStatus.Trading)

  expect(parsePriceData(data, price.aggregate.publishSlot + MAX_SLOT_DIFFERENCE).status).toBe(PriceStatus.Trading)

  const stalePrice = parsePriceData(data, price.aggregate.publishSlot + MAX_SLOT_DIFFERENCE + 1)
  expect(stalePrice.status).toBe(PriceStatus.Unknown)
  expect(stalePrice.price).toBeUndefined()
  expect(stalePrice.confidence).toBeUndefined()

  done()
})
